name: java-springboot-CI/CD

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "eu-west-1"
      ECR_REPOSITORY: "java-app"
      #IMAGE_TAG: 'latest'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Config AWS credential
      uses: aws-actions/configure-aws-credentials@v1
  
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2   
    # - name: Build with Maven
    #   run: mvn clean package -DskipTests
      
    # - name: Lint with mvn sonar
    #   run: mvn sonar:sonar -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} 

    - name: Build, tag and push image to AWS ECR
      id: build_image
      env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}     
      run: |
        export IMAGE_TAG=$(echo ${GITHUB_SHA} | cut -c 1-7)
        docker image build -t 190168171128.dkr.ecr.eu-west-1.amazonaws.com/java-app:$IMAGE_TAG .
        docker push 190168171128.dkr.ecr.eu-west-1.amazonaws.com/java-app:$IMAGE_TAG
    # - name: Login to ECR
    # export IMAGE_TAG=$(echo ${GITHUB_SHA} | cut -c 1-7)
    #   run: aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 190168171128.dkr.ecr.eu-west-1.amazonaws.com
      
    # - name: Push Docker image to ECR
    #   if: github.ref == 'refs/heads/master'
    #   run: |
    #     docker tag test:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
    #     docker push  $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
      
    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-definition
    #   uses: aws-actions/amazon-ecr-login@v1
    # - name: Download task definition
    #   run: |
    #       aws ecs describe-task-definition --task-definition  ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json
    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: false
